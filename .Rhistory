library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
set.seed(125)
segmentationOriginal
names(segmen)
names(segmentationOriginal)
inTrain<-createDataPartition(segmentationOriginal$Case, p=0.6, list=FALSE)
training_set<-segmentationOriginal[inTrain,]
testing_set<-segmentationOriginal[-inTrain,]
model_fit<-train(Class~., method="rpart", data=training_set)
install.packages("rpart")
set.seed(125)
model_fit<-train(Class ~ ., method="rpart", data=training_set)
library(caret)
library(rpart)
model_fit<-train(Class ~ ., method="rpart", data=training_set)
install.packages('caret', dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
set.seed(125)
model_fit<-train(Class ~ ., method="rpart", data=training_set)
library(caret)
model_fit<-train(Class ~ ., method="rpart", data=training_set)
model_fit
summary(model_fit)
model_fit
print(model_fit$finalModel)
library(rattle)
install.packages(rattle)
install.packages('rattle')
library(rattle)
library(rattle)
fancyRpartPlot(model_fit$finalModel)
install.packages('rattle', dependencies = TRUE)
install.packages("rattle", dependencies = TRUE)
library(rattle)
fancyRpartPlot(model_fit$finalModel)
library(pgmm)
data(olive)
olive<-olive[,-1]
olive
names(olive)
model_olive<-train(Area~.,method="rpart",data=olive)
library(caret)
model_olive<-train(Area~.,method="rpart",data=olive)
model_olive<-train(Area ~ .,method = "rpart",data = olive)
head(olive)
tail(olive)
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train=sampl(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
train=sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA=SAheart[train,]
testSA=SAheart[-train,]
names(trainSA)
head(SAheart)
set.seed(13234)
help(SAheart)
modelSA<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial")
modelSA<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
modelSA
missClass=function(values,prediction){sum(((prediction>0.5)*1)!=values)/length(values)}
missClass(testSA$chd,predict(modelSA,newdata=testSA))
missClass(trainSA$chd,predict(modelSA,newdata=trainSA))
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
head(vowel.test)
head(vowel.train)
set.seed(33833)
vowel_fit<-train(y~.,data=vowel.train, method="rf",prox=TRUE)
help("varImp")
varImp(vowel_fit)
vowel_fit<-train(y~.,data=vowel.test, method="rf",prox=TRUE)
varImp(vowel_fit)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
vowel_fit<-randomForest(y~.,data=vowel.train)
varImp(vowel_fit)
order(varImp(vowel_fit))
order(varImp(vowel_fit), decreasing = TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
head(vowel.test)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
rffit<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
library(caret)
rffit<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
rffit<-train(y~.,data=vowel.train,method="rf")
gbmfit<-train(y~.,data=vowel.train,method="gbm")
gbmfit<-train(y~.,data=vowel.train,method="gbm")
rfpred<-predict(rffit,vowel.test)
gbmpred<-predict(gbmfit,vowel.test)
rfpred
summary(rfpred)
confusionMatrix(rfpred,vowel.test$y)$overall[1]
confusionMatrix(gbmpred,vowel.test$y)$overall[1]
predDF<-data.frame(rfpred,gbmpred,y=vowel.test$y)
sum(rfpred[predDF$rfpred==predDF$gbmpred]==predDF$y[predDF$rfpred==predDF$gbmpred])/sum(predDF$rfpred==predDF$gbmpred)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData<-data.frame(diagnosis,predictors)
inTrain<-createDataPartition(adData$diagnosis,p=3/4)[[1]]
training<-adData[inTrain,]
testing<-adData[-inTrain,]
set.seed(62433)
alzrf<-train(diagnosis~.,data=training,method="rf")
alzgbm<-train(diagnosis~.,data=training,method="gbm")
alzlda<-train(diagnosis~.,data=training,method="lda")
alzrfpred<-predict(alzrf,testing)
alzgbmpred<-predict(alzgbm,testing)
alzidapred<-predict(alzida,testing)
alzldapred<-predict(alzlda,testing)
predDF<-data.frame(alzrfpred,alzgbmpred,alzldapred,diagnosis=testing$diagnosis)
stackedrf<-train(diagnosis~.,data=predDF,method="rf")
stackedpred<-predict(stackedrf,predDF)
help(confusionMatrix)
confusionMatrix(alzrfpred,testing$diagnosis)$overall[[1]]
confusionMatrix(alzgbmpred,testing$diagnosis)$overall[[1]]
confusionMatrix(alzldapred,testing$diagnosis)$overall[[1]]
confusionMatrix(stackedrf,testing$diagnosis)$overall[[1]]
confusionMatrix(stackedpred,testing$diagnosis)$overall[[1]]
setwd("C:/Users/mbonifac/Desktop/Coursera/R_Portfolio")
train<-read.csv("./pml-training.csv")
working_train<-train[lapply(train,function(x) sum(is.na(x))/length(x))<0.1]
working_train[working_train == ""] <- NA
working_train<-working_train[lapply(working_train,function(x) sum(is.na(x))/length(x))<0.1]
working_train<-working_train[,-c(1:7)]
library(caret)
library(kernlab)
set.seed(125)
inTrain<-createDataPartition(y=working_train$classe, p=0.75, list=FALSE)
train_train<-working_train[inTrain,]
train_validate<-working_train[-inTrain,]
model_tree<-train(classe~.,method="rpart",data=train_train)
plot(model_tree$finalModel, uniform=TRUE, main="Classification Tree")
library(rattle)
fancyRpartPlot(model_tree$finalModel)
help(model_tree)
help(predict)
valid_tree<-predict(model_tree,newdata=train_validate)
confusionMatrix(valid_tree,train_validate$classe)
model_forest<-train(classe~.,method="rf",data=train_train)
model_boost<-train(classe~.,method="gbm",data=train_train, verbose=FALSE)
valid_boost<-predict(model_boost,newdata=train_validate)
confusionMatrix(valid_boost,train_validate$classe)
test<-read.csv("./pml-testing.csv")
working_test<-train[lapply(test,function(x) sum(is.na(x))/length(x))<0.1]
working_test[working_test == ""] <- NA
working_test<-working_test[lapply(working_test,function(x) sum(is.na(x))/length(x))<0.1]
working_test<-working_test[,-c(1:7)]
predict(model_boost,newdata=working_test)
working_test<-train[lapply(test,function(x) sum(is.na(x))/length(x))<0.1]
working_test<-train[lapply(test,function(x) sum(is.na(x))/length(x))<0.1]
working_test<-test[lapply(test,function(x) sum(is.na(x))/length(x))<0.1]
working_test[working_test == ""] <- NA
working_test<-working_test[lapply(working_test,function(x) sum(is.na(x))/length(x))<0.1]
working_test<-working_test[,-c(1:7)]
predict(model_boost,newdata=working_test)
test_predict<-predict(model_boost,newdata=working_test)
confusionMatrix(test_predict,test$classe)
confusionMatrix(test_predict,working_test$classe)
test_predict
# Chunk 1
setwd("C:/Users/mbonifac/Desktop/Coursera/R_Portfolio")
trainmaster<-read.csv("./pml-training.csv")
#Remove the columns that are blank or have NA
working_train<-trainmaster[lapply(trainmaster,function(x) sum(is.na(x))/length(x))<0.1]
working_train[working_train == ""] <- NA
working_train<-working_train[lapply(working_train,function(x) sum(is.na(x))/length(x))<0.1]
#Remove columns that are known to not affect classe, (row number, user_name, raw_timestamp_part_1,
#raw_timestamp_part_2, cvtd_timestamp, new_window, num_window)
working_train<-working_train[,-c(1:7)]
#Divide data into a training set and a validation set (75% training/25% validation)
library(caret)
library(kernlab)
set.seed(125)
inTrain<-createDataPartition(y=working_train$classe, p=0.75, list=FALSE)
train_train<-working_train[inTrain,]
train_validate<-working_train[-inTrain,]
# Chunk 2
testmaster<-read.csv("./pml-testing.csv")
#Remove the columns that are blank or have NA
working_test<-testmaster[lapply(test,function(x) sum(is.na(x))/length(x))<0.1]
working_test[working_test == ""] <- NA
working_test<-working_test[lapply(working_test,function(x) sum(is.na(x))/length(x))<0.1]
#Remove columns that are known to not affect classe, (row number, user_name, raw_timestamp_part_1,
#raw_timestamp_part_2, cvtd_timestamp, new_window, num_window)
working_test<-working_test[,-c(1:7)]
# Chunk 3
model_tree<-train(classe~.,method="rpart",data=train_train)
library(rattle)
fancyRpartPlot(model_tree$finalModel)
# Chunk 4
valid_tree<-predict(model_tree,newdata=train_validate)
confusionMatrix(valid_tree,train_validate$classe)
# Chunk 5
model_boost<-train(classe~.,method="gbm",data=train_train, verbose=FALSE)
# Chunk 1
setwd("C:/Users/mbonifac/Desktop/Coursera/R_Portfolio")
trainmaster<-read.csv("./pml-training.csv")
#Remove the columns that are blank or have NA
working_train<-trainmaster[lapply(trainmaster,function(x) sum(is.na(x))/length(x))<0.1]
working_train[working_train == ""] <- NA
working_train<-working_train[lapply(working_train,function(x) sum(is.na(x))/length(x))<0.1]
#Remove columns that are known to not affect classe, (row number, user_name, raw_timestamp_part_1,
#raw_timestamp_part_2, cvtd_timestamp, new_window, num_window)
working_train<-working_train[,-c(1:7)]
#Divide data into a training set and a validation set (75% training/25% validation)
library(caret)
library(kernlab)
set.seed(125)
inTrain<-createDataPartition(y=working_train$classe, p=0.75, list=FALSE)
train_train<-working_train[inTrain,]
train_validate<-working_train[-inTrain,]
# Chunk 2
testmaster<-read.csv("./pml-testing.csv")
#Remove the columns that are blank or have NA
working_test<-testmaster[lapply(testmaster,function(x) sum(is.na(x))/length(x))<0.1]
working_test[working_test == ""] <- NA
working_test<-working_test[lapply(working_test,function(x) sum(is.na(x))/length(x))<0.1]
#Remove columns that are known to not affect classe, (row number, user_name, raw_timestamp_part_1,
#raw_timestamp_part_2, cvtd_timestamp, new_window, num_window)
working_test<-working_test[,-c(1:7)]
# Chunk 3
model_tree<-train(classe~.,method="rpart",data=train_train)
library(rattle)
fancyRpartPlot(model_tree$finalModel)
# Chunk 4
valid_tree<-predict(model_tree,newdata=train_validate)
confusionMatrix(valid_tree,train_validate$classe)
# Chunk 5
model_boost<-train(classe~.,method="gbm",data=train_train, verbose=FALSE)
valid_boost<-predict(model_boost,newdata=train_validate)
confusionMatrix(valid_boost,train_validate$classe)
test_prediction<-predict(model_boost,newdata=working_test)
Prediction_Results<-data.frame(prediction=test_prediction)
test_prediction<-predict(model_boost,newdata=working_test)
Prediction_Results<-data.frame(prediction=test_prediction)
Prediction_Results
install.packages("shiny")
install.packages(leaflet)
install.packages('leaflet')
```{r echo = TRUE}
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
```
```{r echo = TRUE}
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=34.073611, long=-118.24, popup="Dodger Stadium")
my_map
```
addMarkers(lat=34.073611, lng=-118.24, popup="Dodger Stadium")
my_map <- my_map %>%
my_map
addTiles()
my_map
library(leaflet)
my_map<-leaflet()%>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
library(leaflet)
my_map<-leaflet()%>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=34.073611, lng=-118.24,
popup="Dodger Stadium")
my_map
library(leaflet)
my_map<-leaflet()%>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=34.073611, lng=-118.24, popup="Dodger Stadium")
addMarkers(lat=34.043056, lng=-118.267222, popup="Staples Center")
addMarkers(lat=34.013, lng=-118.285, popup="Los Angeles Memorial Sports Arena")
addMarkers(lat=34.014167, lng=-118.287778, popup="Los Angeles Memorial Coliseum")
my_map
library(leaflet)
my_map<-leaflet()%>%
addTiles()
my_map
lat<-c(34.073611, 34.043056, 34.014167)
lng<-c(-118.24,-118.267222, -118.287778)
location<-c("Dodger Stadium", "Staples Center", "Los Angeles Memorial Coliseum")
LA_venues<-cbind(lat,lng)
my_map <- my_map %>%
addMarkers(LA_venues,popup=location)
my_map
library(leaflet)
lat<-c(34.073611, 34.043056, 34.014167)
lng<-c(-118.24,-118.267222, -118.287778)
location<-c("Dodger Stadium", "Staples Center", "Los Angeles Memorial Coliseum")
LA_venues<-cbind(lat,lng)
LA_venues %>%
leaflet() %>%
addTiles() %>%
addMarkers()
class(LA_venues)
library(leaflet)
lat<-c(34.073611, 34.043056, 34.014167)
lng<-c(-118.24,-118.267222, -118.287778)
location<-c("Dodger Stadium", "Staples Center", "Los Angeles Memorial Coliseum")
LA_venues<-data.frame(lat,lng)
LA_venues %>%
leaflet() %>%
addTiles() %>%
addMarkers()
library(leaflet)
lat<-c(34.073611, 34.043056, 34.014167)
lng<-c(-118.24,-118.267222, -118.287778)
location<-c("Dodger Stadium", "Staples Center", "Los Angeles Memorial Coliseum")
LA_venues<-data.frame(lat,lng)
LA_venues %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup=location)
library(leaflet)
lat<-c(34.073611, 34.043056, 34.014167)
lng<-c(-118.24,-118.267222, -118.287778)
location<-c("Dodger Stadium", "Staples Center", "Los Angeles Memorial Coliseum")
LA_venues<-data.frame(lat,lng)
LA_venues %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup=location) %>%
library(leaflet)
lat<-c(34.073611, 34.043056, 34.014167)
lng<-c(-118.24,-118.267222, -118.287778)
location<-c("Dodger Stadium", "Staples Center", "Los Angeles Memorial Coliseum")
LA_venues<-data.frame(lat,lng)
LA_venues %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup=location)
install.packages('package.skeleton')
mean()
lm
show
dgamma
showMethods()
library(plotly)
install.packages('plotly')
installed.packages()
libary(plotly)
library(plotly)
require(plotly)
remove.packages(ggplot2)
install.packages('Rcpp')
install.packages('ggplot2')
library(plotly)
install.packages('plotly', dependencies = TRUE)
library(plotly)
install.packages('colorspace')
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers")
plot_ly(mtcars, x = "wt", y = "mpg", mode = "markers")
plot_ly(mtcars, x = "wt", y = "mpg", mode = "marker")
plot_ly(mtcars, x = "wt", y = "mpg", type = "marker")
?plot_ly
plot_ly(mtcars, x = "wt", y = "mpg")
plot_ly(mtcars, x = wt, y = mpg)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, type="scatter")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, type="marker")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "marker")
head(mtcars)
plot_ly(data=mtcars, x=~mpg, y=~wt)
plot_ly(data=mtcars, x=~wt, y=~mpg, color = as.factor(cyl))
plot_ly(data=mtcars, x=~wt, y=~mpg, color = as.factor(~cyl))
plot_ly(data=mtcars, x=~wt, y=~mpg, color = as.factor(mtcars$cyl))
plot_ly(data=mtcars, x=~wt, y=~mpg, type = "scatter", color = as.factor(mtcars$cyl))
plot_ly(data=mtcars, x=~wt, y=~mpg, type = "markers", color = as.factor(mtcars$cyl))
plot_ly(data=mtcars, x=~wt, y=~mpg, type = "scatter", mode = "markers", color = as.factor(mtcars$cyl))
plot_ly(data=ToothGrowth, x=~dose, y=~len, type = "scatter", mode = "markers", color = as.factor(ToothGrowth$supp))
OJVC<-c("orange","green")
plot_ly(data=ToothGrowth, x=~dose, y=~len, type = "scatter", mode = "markers", color = as.factor(ToothGrowth$supp),colors = OJVC)
plot_ly(data=ToothGrowth, x=~dose, y=~len, type = "scatter", mode = "markers", color = as.factor(ToothGrowth$supp),colors = OJVC)%>%
layout(title='Tooth Growth vs. Vitamin C Dosage')
library(plotly)
OJVC<-c("orange", "blue")
plot_ly(data=ToothGrowth, x=~dose, y=~len, type = "scatter", mode = "markers", color = as.factor(ToothGrowth$supp),colors = OJVC)%>%
+ layout(title='Tooth Growth vs. Vitamin C Dosage')
library(plotly)
OJVC<-c("orange", "blue")
plot_ly(data=ToothGrowth, x=~dose, y=~len, type = "scatter", mode = "markers", color = as.factor(ToothGrowth$supp),colors = OJVC)
layout(title='Tooth Growth vs. Vitamin C Dosage')
knit_with_parameters('C:/Users/mbonifac/Desktop/Coursera/R_Portfolio/Course 9/Course9_Week3.Rmd')
knit_with_parameters('C:/Users/mbonifac/Desktop/Coursera/R_Portfolio/Course 9/Course9_Week3.Rmd')
setwd("C:/Users/mbonifac/Desktop/Coursera/R_Portfolio/Course 9/Week4ProjectMFB-slidy/Week4MFBSlidy")
publish_rpubs("Shiny-mtcars",html_file="index.html")
library(slidify)
publish_rpubs("Shiny-mtcars",html_file="index.html")
publish_rpubs("Shiny-mtcars",html_file="index.html")
knit_with_parameters('C:/Users/mbonifac/Desktop/Coursera/R_Portfolio/Course 9/Week4ProjectMFB-slidy/Week4MFBSlidy/index.Rmd')
publish_rpubs("Shiny-mtcars",html_file="index.html")
find.package("RCurl")
.libPaths("")
?find.package
?.libPaths
publish_rpubs("Shiny-mtcars",html_file="index.html")
?version
version
.libPaths("C:/Users/mbonifac/Documents/R/win-library/3.3/RCurl")
publish_rpubs("Shiny-mtcars",html_file="index.html")
